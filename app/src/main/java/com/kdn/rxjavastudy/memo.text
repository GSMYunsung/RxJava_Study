

     Observable 은 데이터 흐름에 맞게 알림을 보내 Observer 가 데이터를 사용할 수 있도록 한다.

     Observable 을 이용해 데이터를 회수하고 변환하는 메커니즘을 정의.
     Observer 는 이를 구독해 데이터가 준비되면 이에 반응한다.

    # 순서

    Observable이 데이터 스트림(로드된 데이터)을 처리하고, 완료되면 데이터를 발행(emit)한다.
    데이터를 발행할 때마다 구독(수신한 데이터를 가지고 할 행동을 정의)하고 있는 모든 Observer가 알림을 받는다.
    Observer는 수신한 데이터를 가지고 어떠한 일을 한다.

    # nservable 이 데이터를 발행한 후 보내는 알림

    onNext -  데이터의 발행을 알림
    onError - 오류가 발생했음을 알림, 이후에 onNext 와 onComplete 가 발생하지 않음
    onComplete - 모든 데이터의 발행이 완료되었음을 알림, 딱 한 번만 발생하며 이후에 onNext 가 발생하면 안됨

    # Observable 생성하기

    # just

    - 가장 간단한 생성방식. 함수에 인자로 넣은 데이터를 차례로 발행한다. 최대 10개 까지 가능하며
      들어온값을 다르게 변경하고 싶다면 map 으로 매핑을 해주면 된다.

    # from

    - 여러 데이터를 다뤄야 하는경우 사용. 특정 타입의 데이터를 observable로 바꿔 주는 메소드이다.

    # range(1,10).repeat(2)

    - 1부터 10까지 2번돌린다. 즉, 반복을 하게 만들어준다.

    - 단, 앞의 숫자는 range 의 시작지점이다. 또, 뒤의 숫자는 끝나는 점이 아니라 +1이 종료되는 시점이다.

    # interval , takeWhile(조건)

    - 각 매게 변수로는 초기지연, 반복 시간, 반복 단위 이고, 초기지연 시간 이후에 반복시간 + 단위로 반복한다.
       다만 조건을 걸지않으면 무한 반복되므로 조건을 takeWhile로 걸어주어야한다.

    # Create

    - 각 Stream의 구현체 ( Observable / Single … )에 맞는 Emitter(발행인)를 활용하여 데이터를 방출한다.
    - 구독자가 stream을 구독 할 때마다 데이터를 방출합니다.
    - 다만 실제로 많이 사용하지 않고, onComplete 메소드를 호출 한 이후, onNext를 통해 데이터를 방출하더라도 데이터는 방출되지 않는다.

    # Filter

    - Observable 에서 원하는 데이터만 걸러내는 역할
    - 필요없는 데이터는 제거하고 오직 관심있는 데이터만 filter() 함수를 통과
    - Predicate를 인자로 넣음 (Predicate - 진위 판별이라는 뜻, boolean 값을 리턴하는 특수한 함수형 인터페이스)

    # Last

    - 데이터클래스의 마지막 데이터를 반환한다.

    - last 를 쓰면 OnComplete 를 사용하지 못한다.
       왜냐하면 last 의 반환값이 single 이기 때문이다.

    -  Single 에는 OnSuccess , OnFailed 밖에 없기 때문.

    -  비어있는 예외나 다른 예외를 찾고싶다면 lastOrError 를 쓰면 된다.

    # distinct

    - data 클래스에 인자값으로 넣은 값의 중복이 확인되면 먼저 들어온 데이터가 나오고, 그 후의 중복값은 모두 무시된다.

    -  distinct 안에 아무것도 넣지 않으면 모든 객체가 같은지 중복을 확인한다.
       즉, 모든 객체가 같은지 검사함

    # skip

    - skip : 첫번째부터 안에 인수까지 건너뜀
    - skipLast : 마지막 인수부터 역순으로 건너뜀

    - 만약 distinct 로 먼저 중복제거를 한다면 중복제거를 한후 조건에 해당되는 인수를 건너뛴다.

    - skip 안에 시간을 넣어 딜레이를 줄수도있다.

    # buffer

    - buffer 에 넣은 인수만큼 데이터를 묶어서 제공해준다
    - 만약 딱 나누어 떨어지지 않을경우 나머지만을 묶어서 제공한다.

    # map

    - map 으로 기존의 데이터를 가공 할 수 있다.

    - 즉, 데이터클래스의 기존 값을 다른값으로 수정, 삭제를 할 수 있다는 말

    # Group By

    - 하나의 Observable을 여러개의 새로운 GroupedByObservable로 만든다.

    - 원본 Observable의 데이터를 그룹별로 묶는다기보다는 각각의 데이터들이 그룹에 해당하는 Key를 가지게 된다.

    - GroupedByObservable은 getKey()를 통해 구분된 그룹을 알 수 있게 해준다.

    # merge

    - merge는 두 개의 Observable를 merge 시켜 하나로 결합해 전송하는걸 말합니다.

    - merge 를 사용함으로써 마치 두개의 Observable을 결합해 하나의 Observable처럼 동작 시킬수있습니다.

    # concat

    - concat 함수는 두개 이상의 Observable을 이어주는 역할을 하는 함수입니다.

    - 첫 번째 Observable 이 onComplete 가 발생해야 두번째 Observable 을 구독합니다.

    - marge 와는 다르게 첫번째의 Observable 이 끝날때까지 다음 Observable 이 추가되지 않는다.

    # StartWith

    - 이역시 두개 이상의 Observable 을 이어주는 함수입니다.

    # zip

    - 여러개의 Observable 을 합쳐서 전송하게 됩니다. 특정 item 끼리 합쳐서 두 개 의 발행을 합쳐서 내려주게됩니다.

    - 위쪽 Timestamp에서는 1,2,3,4를 발행하였고

      아래쪽 Timestamp에서는  a,b,c,d를 발행했습니다.

      두개를 zip 했을때  1a, 2b, 3c, 4d,를 발행하는것을 알 수 있습니다.